import { spawn } from 'child_process'
import { CommandTypes, SocketEvent } from '../enums'
import { ISocketService } from '../interfaces'
import { HistoryService } from '../service'

export class CommandRunner {

    private socketService: ISocketService

    constructor(socketService: ISocketService) {
        this.socketService = socketService
    }

    protected run(command: string, type: CommandTypes) {
        const params = command.split(' ')
        const cmd = params.shift()
        const child = spawn(cmd, params)

        const historyService = new HistoryService()

        this.socketService.notifyClients(`${type}_${SocketEvent.Start}`, `${command}\n`)

        let output = `${command}\n`
        child.stdout.on('data', data => {
            const dataStr = data.toString()
            output += dataStr
            this.socketService.notifyClients(`${type}_${SocketEvent.Data}`, dataStr)
        })

        child.stdout.on('close', () => {
            this.socketService.notifyClients(`${type}_${SocketEvent.End}`, '\nCommand completed!')
            historyService.add(command, type, output)
        })
    }

    protected error(message: string) {
        this.socketService.notifyClients(SocketEvent.SocketError, message)
    }
}