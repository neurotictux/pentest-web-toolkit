import { spawn } from 'child_process'
import { CommandTypes } from '../enums/command-types.enum'
import { SocketEvent } from '../enums/socket-event.enum'
import { HistoryService } from '../service/history-service'
import { SocketService } from '../service/socket-service'

export class CommandRunner {

    protected run(command: string, type: CommandTypes) {
        const params = command.split(' ')
        const cmd = params.shift()
        const child = spawn(cmd, params)

        const historyService = new HistoryService()
        const socketService = new SocketService()

        socketService.notifyClients(`${type}_${SocketEvent.Start}`, `${command}\n`)

        let output = `${command}\n`
        child.stdout.on('data', data => {
            const dataStr = data.toString()
            output += dataStr
            socketService.notifyClients(`${type}_${SocketEvent.Data}`, dataStr)
        })

        child.stdout.on('close', () => {
            socketService.notifyClients(`${type}_${SocketEvent.End}`, '\nCommand completed!')
            historyService.add(command, type, output)
        })
    }
}