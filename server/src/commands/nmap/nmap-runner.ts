import { CommandTypes } from '../../enums'
import { ISocketService } from '../../interfaces'
import { RegexUtils } from '../../utils'
import { CommandRunner } from '../command-runner'
import { NmapCommand } from './nmap-command'

export class NmapRunner extends CommandRunner {

  constructor(socketService: ISocketService) {
    super(socketService)
  }

  networkSweeping(command: NmapCommand) {
    const { ipRange } = command
    if (RegexUtils.IpRange.test(ipRange)) {
      this.run(`nmap -sn ${ipRange}`, CommandTypes.NmapNetworkSweeping)
    } else {
      this.error('Invalid ip range')
    }
  }

  bannerGrabbing(command: NmapCommand) {
    const { ipRange, portRange } = command
    if (RegexUtils.IpRange.test(ipRange) && RegexUtils.PortRange.test(portRange)) {
      const cmd = `nmap -A ${ipRange} --open ${portRange ? `-p ${portRange}` : ''}`
      this.run(cmd, CommandTypes.NmapBannerGrabbing)
    } else {
      this.error('Invalid ip range')
    }
  }
}