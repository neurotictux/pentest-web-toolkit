import { CommandTypes } from '../../enums'
import { ISocketService } from '../../interfaces'
import { RegexUtils } from '../../utils'
import { CommandRunner } from '../command-runner'
import { CommandBuilder } from './command-builder'
import { NmapCommand } from './nmap-command'

export class NmapRunner extends CommandRunner {

  constructor(socketService: ISocketService) {
    super(socketService)
  }

  networkSweeping(command: NmapCommand) {
    const { ipRange } = command
    if (RegexUtils.IpRange.test(ipRange)) {
      this.run(`nmap -sn ${ipRange}`, CommandTypes.NetworkSweeping)
    } else {
      this.error('Invalid ip range')
    }
  }

  bannerGrabbing(command: NmapCommand) {
    const { ipRange, portRange, usePing } = command
    if (RegexUtils.IpRange.test(ipRange) && (!portRange || RegexUtils.PortRange.test(portRange))) {
      const builder = new CommandBuilder('nmap -A')
      builder.addParam(`${ipRange} --open`)
      builder.addParam(portRange && `-p ${portRange}`)
      builder.addParam(usePing ? '' : '-Pn')
      this.run(builder.build(), CommandTypes.BannerGrabbing)
    } else {
      this.error('Invalid ip range')
    }
  }
}