import { createServer } from 'http'

import * as bodyParser from 'body-parser'
import * as express from 'express'
import * as socketio from 'socket.io'
import { NmapCommand } from './commands/nmap-command'
import { HistoryService } from './service/history-service'
import { SocketService } from './service/socket-service'
import { RegexUtils } from './utils/regex'

const socketService = new SocketService()

const app = express()
app.use(bodyParser.json())

app.post('/api/nmap/network-sweeping/:iprange', async (req, res) => {
    if (RegexUtils.IpRange.test(req.params.iprange)) {
        const result = await new NmapCommand().networkSweeping(req.params.iprange)
        res.end(result)
    } else {
        res.end('Invalid ip range')
    }
})

app.get('/api/history', (req, res) => {
    const history = new HistoryService()
    res.json(history.get())
})

app.get('/api/history/:id', (req, res) => {
    const history = new HistoryService()
    res.json(history.get())
})

const server = createServer(app)
const io = socketio(server)

io.on('connection', client => socketService.addClient(client))

server.listen(8000)

export enum LogType {
    AppStart = 'APP_RUN_START',
    AppData = 'APP_RUN_DATA',
    AppEnd = 'APP_RUN_END',
    PublishStart = 'APP_PUBLISH_START',
    PublishData = 'APP_PUBLISH_DATA',
    PublishEnd = 'APP_PUBLISH_END',
}