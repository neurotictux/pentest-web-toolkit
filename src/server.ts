import { createServer } from 'http'

import * as bodyParser from 'body-parser'
import * as express from 'express'
import * as socketio from 'socket.io'
import { NmapCommand } from './commands/nmap-command'
import { HistoryService } from './service/history-service'
import { RegexUtils } from './utils/regex'

interface IClientSocket {
    emit(type: string, data: { name: string, log: string }): void
}

const app = express()
app.use(bodyParser.json())

app.post('/nmap/network-sweeping/:iprange', (req, res) => {
    if (RegexUtils.IpRange.test(req.params.iprange)) {
        new NmapCommand().networkSweeping(req.params.iprange)
        res.end('ENDED')
    } else {
        res.end('Invalid ip range')
    }
})

app.get('/history', (req, res) => {
    const history = new HistoryService()
    res.json(history.get())
})

app.get('/history/:id', (req, res) => {
    const history = new HistoryService()
    res.json(history.get())
})

const server = createServer(app)
const io = socketio(server)
const clients: IClientSocket[] = []
io.on('connection', (client: IClientSocket) => clients.push(client))

server.listen(8000)

export enum LogType {
    AppStart = 'APP_RUN_START',
    AppData = 'APP_RUN_DATA',
    AppEnd = 'APP_RUN_END',
    PublishStart = 'APP_PUBLISH_START',
    PublishData = 'APP_PUBLISH_DATA',
    PublishEnd = 'APP_PUBLISH_END',
}

export const onLog = (name: string, type: LogType, log: string = '') => {
    clients.forEach(p => p.emit(type.toString(), { name, log }))
}